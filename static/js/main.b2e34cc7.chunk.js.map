{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","SetTimer","_ref","type","value","handleClick","className","id","concat","onClick","Timer","_ref2","mode","time","Controls","_ref3","active","handleReset","handlePlayPause","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSetTimer","inc","state","setState","defineProperty","breakValue","sessionValue","sessionActive","clearInterval","countdown","audio","pause","currentTime","setInterval","prevProps","prevState","play","_this2","App_Header","App_SetTimer","App_Timer","moment","format","App_Controls","src","ref","element","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2e34cc7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport  moment  from 'moment'\n// import logo from './logo.svg';\nimport './App.css';\n\nconst Header = () => (<h1>Pomodoro Clock</h1>)\n\nconst SetTimer = ({ type, value, handleClick  }) => (\n  <div className = \"lenght\">\n    <h2 id = {`${type}-label`}>{type === \"session\" ? \"Session \" : \"Break \"}Length</h2>\n    <div className = \"incre-decre\">\n      <button id = {`${type}-decrement`} onClick={() => handleClick(false, `${type}Value`)}>-</button>\n      <div className = \"breakSession\" id = {`${type}-length`}>{value}</div>\n      <button id = {`${type}-increment`} onClick={() => handleClick(true, `${type}Value`)}>+</button>\n    \n    </div>\n  </div>\n)\n\nconst Timer = ({ mode, time}) => (\n<div className = \"timer\">\n<h1  className = \"timer-label\" id = \"timer-label\">{mode === \"session\" ? \"Working \" : \"Break \"}</h1>  \n<h1 className = \"time-left\" id = \"time-left\">{time}</h1>\n</div>\n)\nconst Controls = ({ active, handleReset, handlePlayPause }) => (\n  <div className = \"start-reset\">\n    <button className = \"myButton\" id = \"start_stop\" onClick = {() => handlePlayPause()}>{active ? \"Pause\" : \"Start\"}</button>\n    <button className = \"myButton\" id = \"reset\" onClick = {() => handleReset()}>Reset</button>\n  </div>\n)\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      breakValue: 5,\n      sessionValue: 25,\n      mode: \"session\",\n      time: 25 * 60 * 1000,\n      active: false,\n      sessionActive: false\n    }\n  }\n  \n  componentDidUpdate(prevProps, prevState){\n    if(prevState.time === 0 && prevState.mode === \"session\"){\n      this.setState({ time: this.state.breakValue * 60 * 1000, mode: \"break\" })\n      this.audio.play()\n    }\n    if(prevState.time === 0 && prevState.mode === \"break\"){\n      this.setState({ time: this.state.sessionValue * 60 * 1000, mode: \"session\" })\n      this.audio.play()\n    }\n  }\n  \n  handleSetTimer = (inc, type) => {\n     if (inc && this.state[type] === 60) return\n     if (!inc && this.state[type] === 1) return\n     this.setState({ [type]: this.state[type] + (inc ? 1 : -1) })\n  }\n  \n  handleReset = () => {\n    this.setState({ breakValue: 5, sessionValue: 25, mode: \"session\", time: 25 * 60 * 1000, active: false, sessionActive: false })\n    clearInterval(this.countdown)\n    this.audio.pause()\n    this.audio.currentTime = 0\n  }\n  \n  handlePlayPause = () => {\n    if(this.state.active){\n      clearInterval(this.countdown)\n      this.setState({ active:false})\n       }else{\n         if(this.state.sessionActive){\n            this.countdown = setInterval(()=> this.setState({time: this.state.time-1000}), 1000)\n            this.setState({ active:true })  \n            }else{\n             this.setState({\n               time: this.state.sessionValue * 60 * 1000,\n               sessionActive: true,\n               active: true}, () => this.countdown = setInterval(()=> this.setState({time: this.state.time-1000}), 1000))          \n             \n           \n         }\n       \n    }   \n    \n  }\n  \n  render(){\n    return(\n    <div className = \"container\">\n        <Header />\n        <div className = \"incre-decre\">\n        <SetTimer type = \"break\" value={this.state.breakValue} handleClick = {this.handleSetTimer}/>\n        <Timer mode = {this.state.mode} time = {moment(this.state.time).format(\"mm:ss\")} />\n        <SetTimer type = \"session\" value={this.state.sessionValue} handleClick = {this.handleSetTimer}/>\n        </div>\n        <Controls active = {this.state.active} handlePlayPause = {this.handlePlayPause} handleReset = {this.handleReset} />\n        <audio id=\"beep\" src = \"https://www.soundjay.com/mechanical/sounds/clong-2.mp3\" ref = {element => this.audio = element}></audio>\n    <footer>Coded and designed by Noel Miranda</footer>\n      </div>\n      \n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//  import { moment } from 'moment'\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}